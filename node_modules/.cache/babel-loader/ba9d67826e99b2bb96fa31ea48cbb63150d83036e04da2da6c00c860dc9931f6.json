{"ast":null,"code":"var _jsxFileName = \"D:\\\\react\\\\mystudy\\\\src\\\\ChatGpt.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport './ChatGpt.css';\nimport \"@chatscope/chat-ui-kit-styles/dist/default/styles.min.css\";\nimport { MainContainer, ChatContainer, MessageList, Message, MessageInput, TypingIndicator } from \"@chatscope/chat-ui-kit-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = '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';\nfunction ChatGPT() {\n  _s();\n  const [typing, setTyping] = useState(false);\n  const [messages, setMessages] = useState([{\n    message: \"Hello, I am chatGPT!\",\n    //GPT 시작 멘트\n    sender: \"ChatGPT\"\n  }]);\n  const handleSend = async message => {\n    const newMessage = {\n      message: message,\n      sender: \"user\",\n      direction: \"outgoing\"\n    };\n    const newMessages = [...messages, newMessage];\n    setMessages(newMessages);\n    setTyping(true);\n    await MessageChatGPT(newMessages);\n  };\n  async function MessageChatGPT(charMessages) {\n    //charMessages{ sender: \"user\" or \"chatGPT\", message: \"The message content here\"}\n    // apiMessages { role: \"user\" or \"assistant\", content: \"the message content here\"\"} api가 알아들을 수 있도록 이런 형태로 바꿔줘야함\n\n    let apiMessage = charMessages.map(messageObject => {\n      let role = \"\";\n      if (messageObject.sender === \"ChatGPT\") {\n        role = \"assistant\";\n      } else {\n        role = \"user\";\n      }\n      return {\n        role: role,\n        content: messageObject.message\n      };\n    });\n    const systemMessage = {\n      role: \"system\",\n      content: \"Speak like a pirate\" //GPT 컨셉 설정\n    };\n\n    const apiRequestBody = {\n      \"model\": \"gpt-3.5-turbo\",\n      \"messages\": [systemMessage, ...apiMessage // [message1, message2 ...]\n      ]\n    };\n\n    await fetch(\"https://api.openai.com/v1/chat/completions\", {\n      method: \"POST\",\n      headers: {\n        \"Authorization\": \"Bearer \" + API_KEY,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(apiRequestBody)\n    }).then(data => {\n      return data.json();\n    }).then(data => {\n      console.log(data);\n      console.log(data.choices[0].message.content);\n      setMessages([...charMessages, {\n        message: data.choices[0].message.content,\n        sender: \"ChatGPT\"\n      }]);\n      setTyping(false);\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"relative\",\n        height: \"800px\",\n        width: \"700px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(MainContainer, {\n        children: /*#__PURE__*/_jsxDEV(ChatContainer, {\n          children: [/*#__PURE__*/_jsxDEV(MessageList, {\n            typingIndicator: typing ? /*#__PURE__*/_jsxDEV(TypingIndicator, {\n              content: \"ChatGPT is typing\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 41\n            }, this) : null,\n            children: messages.map((message, i) => {\n              return /*#__PURE__*/_jsxDEV(Message, {\n                model: message\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 24\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n            placeholder: \"Type message here\",\n            onSend: handleSend\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatGPT, \"XVDeToKGYim9cuN2vPLCasGyETw=\");\n_c = ChatGPT;\nexport default ChatGPT;\nvar _c;\n$RefreshReg$(_c, \"ChatGPT\");","map":{"version":3,"names":["useState","MainContainer","ChatContainer","MessageList","Message","MessageInput","TypingIndicator","jsxDEV","_jsxDEV","API_KEY","ChatGPT","_s","typing","setTyping","messages","setMessages","message","sender","handleSend","newMessage","direction","newMessages","MessageChatGPT","charMessages","apiMessage","map","messageObject","role","content","systemMessage","apiRequestBody","fetch","method","headers","body","JSON","stringify","then","data","json","console","log","choices","className","children","style","position","height","width","typingIndicator","fileName","_jsxFileName","lineNumber","columnNumber","i","model","placeholder","onSend","_c","$RefreshReg$"],"sources":["D:/react/mystudy/src/ChatGpt.jsx"],"sourcesContent":["import { useState } from 'react'\r\nimport './ChatGpt.css'\r\nimport \"@chatscope/chat-ui-kit-styles/dist/default/styles.min.css\";\r\nimport {MainContainer, ChatContainer, MessageList, Message, MessageInput, TypingIndicator} from \"@chatscope/chat-ui-kit-react\";\r\n\r\nconst API_KEY = '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';\r\n\r\nfunction ChatGPT() {\r\n  const [typing, setTyping] = useState(false);\r\n  const [messages, setMessages] = useState([\r\n    {\r\n      message: \"Hello, I am chatGPT!\", //GPT 시작 멘트\r\n      sender: \"ChatGPT\"\r\n    }\r\n  ])\r\n\r\n  const handleSend = async (message) => {\r\n    const newMessage = {\r\n      message: message,\r\n      sender: \"user\",\r\n      direction: \"outgoing\"\r\n    }\r\n\r\n    const newMessages = [...messages, newMessage];\r\n\r\n    setMessages(newMessages);\r\n\r\n    setTyping(true);\r\n\r\n    await MessageChatGPT(newMessages);\r\n\r\n  }\r\n\r\n  async function MessageChatGPT(charMessages){\r\n    //charMessages{ sender: \"user\" or \"chatGPT\", message: \"The message content here\"}\r\n    // apiMessages { role: \"user\" or \"assistant\", content: \"the message content here\"\"} api가 알아들을 수 있도록 이런 형태로 바꿔줘야함\r\n\r\n    let apiMessage = charMessages.map((messageObject) =>{\r\n      let role = \"\";\r\n      if(messageObject.sender === \"ChatGPT\"){\r\n        role=\"assistant\"\r\n      }else{\r\n        role = \"user\"\r\n      }\r\n      return {\r\n        role: role, content: messageObject.message\r\n      }\r\n    });\r\n\r\n    const systemMessage = {\r\n      role: \"system\",\r\n      content: \"Speak like a pirate\" //GPT 컨셉 설정\r\n    }\r\n\r\n    const apiRequestBody = {\r\n      \"model\" : \"gpt-3.5-turbo\",\r\n      \"messages\": [\r\n        systemMessage,\r\n        ...apiMessage // [message1, message2 ...]\r\n      ]\r\n    }\r\n\r\n    await fetch(\"https://api.openai.com/v1/chat/completions\",{\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Authorization\": \"Bearer \" + API_KEY,\r\n        \"Content-Type\" : \"application/json\"\r\n      },\r\n      body: JSON.stringify(apiRequestBody)\r\n    }).then((data) => {\r\n      return data.json();\r\n    }).then((data) => {\r\n      console.log(data);\r\n      console.log(data.choices[0].message.content);\r\n      setMessages( \r\n        [...charMessages, {\r\n          message: data.choices[0].message.content,\r\n          sender: \"ChatGPT\"\r\n        }]\r\n      );\r\n      setTyping(false);\r\n    });\r\n  }\r\n  \r\n  return (\r\n    <div className='App'>\r\n      <div style={{position: \"relative\", height: \"800px\", width: \"700px\"}}>\r\n        <MainContainer>\r\n          <ChatContainer>\r\n            <MessageList\r\n              typingIndicator={typing ? <TypingIndicator content=\"ChatGPT is typing\" /> : null}>\r\n              {messages.map((message, i) => {\r\n                return <Message key={i} model={message}/>\r\n              })}\r\n            </MessageList>\r\n            <MessageInput placeholder='Type message here' onSend={handleSend}/>\r\n          </ChatContainer>\r\n        </MainContainer>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ChatGPT\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}