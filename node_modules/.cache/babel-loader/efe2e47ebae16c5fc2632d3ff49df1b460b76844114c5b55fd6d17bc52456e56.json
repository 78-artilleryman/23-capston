{"ast":null,"code":"var _jsxFileName = \"D:\\\\react\\\\mystudy\\\\src\\\\ChatGpt.jsx\";\nimport { useState } from 'react';\nimport './ChatGpt.css';\nimport React from 'react';\nimport \"@chatscope/chat-ui-kit-styles/dist/default/styles.min.css\";\nimport { MainContainer, ChatContainer, MessageList, Message, MessageInput, TypingIndicator } from \"@chatscope/chat-ui-kit-react\";\n\n// const API_KEY = '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';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatGpt() {\n  // const [typing, setTyping] = useState(false);\n  // const [messages, setMessages] = useState([\n  //   {\n  //     message: \"Hello, I am chatGPT!\", //GPT 시작 멘트\n  //     sender: \"ChatGPT\"\n  //   }\n  // ])\n\n  // const handleSend = async (message) => {\n  //   const newMessage = {\n  //     message: message,\n  //     sender: \"user\",\n  //     direction: \"outgoing\"\n  //   }\n\n  //   const newMessages = [...messages, newMessage];\n\n  //   setMessages(newMessages);\n\n  //   setTyping(true);\n\n  //   await MessageChatGPT(newMessages);\n\n  // }\n\n  // async function MessageChatGPT(charMessages){\n  //   //charMessages{ sender: \"user\" or \"chatGPT\", message: \"The message content here\"}\n  //   // apiMessages { role: \"user\" or \"assistant\", content: \"the message content here\"\"} api가 알아들을 수 있도록 이런 형태로 바꿔줘야함\n\n  //   let apiMessage = charMessages.map((messageObject) =>{\n  //     let role = \"\";\n  //     if(messageObject.sender === \"ChatGPT\"){\n  //       role=\"assistant\"\n  //     }else{\n  //       role = \"user\"\n  //     }\n  //     return {\n  //       role: role, content: messageObject.message\n  //     }\n  //   });\n\n  //   const systemMessage = {\n  //     role: \"system\",\n  //     content: \"Speak like a pirate\" //GPT 컨셉 설정\n  //   }\n\n  //   const apiRequestBody = {\n  //     \"model\" : \"gpt-3.5-turbo\",\n  //     \"messages\": [\n  //       systemMessage,\n  //       ...apiMessage // [message1, message2 ...]\n  //     ]\n  //   }\n\n  //   await fetch(\"https://api.openai.com/v1/chat/completions\",{\n  //     method: \"POST\",\n  //     headers: {\n  //       \"Authorization\": \"Bearer \" + API_KEY,\n  //       \"Content-Type\" : \"application/json\"\n  //     },\n  //     body: JSON.stringify(apiRequestBody)\n  //   }).then((data) => {\n  //     return data.json();\n  //   }).then((data) => {\n  //     console.log(data);\n  //     console.log(data.choices[0].message.content);\n  //     setMessages( \n  //       [...charMessages, {\n  //         message: data.choices[0].message.content,\n  //         sender: \"ChatGPT\"\n  //       }]\n  //     );\n  //     setTyping(false);\n  //   });\n  // }\n\n  return (\n    /*#__PURE__*/\n    //   <div className='ChatGpt'>\n    //   <div style={{position: \"relative\", height: \"800px\", width: \"700px\"}}>\n    //     <MainContainer>\n    //       <ChatContainer>\n    //         <MessageList\n    //           typingIndicator={typing ? <TypingIndicator content=\"ChatGPT is typing\" /> : null}>\n    //           {messages.map((message, i) => {\n    //             return <Message key={i} model={message}/>\n    //           })}\n    //         </MessageList>\n    //         <MessageInput placeholder='Type message here' onSend={handleSend}/>\n    //       </ChatContainer>\n    //     </MainContainer>\n    //   </div>\n    // </div>\n    _jsxDEV(\"div\", {\n      className: \"RChat\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"CHat Gpt\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)\n  );\n}\n_c = ChatGpt;\nexport default ChatGpt;\nvar _c;\n$RefreshReg$(_c, \"ChatGpt\");","map":{"version":3,"names":["useState","React","MainContainer","ChatContainer","MessageList","Message","MessageInput","TypingIndicator","jsxDEV","_jsxDEV","ChatGpt","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","_c","$RefreshReg$"],"sources":["D:/react/mystudy/src/ChatGpt.jsx"],"sourcesContent":["import { useState } from 'react'\r\nimport './ChatGpt.css';\r\nimport React from 'react';\r\nimport \"@chatscope/chat-ui-kit-styles/dist/default/styles.min.css\";\r\nimport {MainContainer, ChatContainer, MessageList, Message, MessageInput, TypingIndicator} from \"@chatscope/chat-ui-kit-react\"\r\n\r\n\r\n// const API_KEY = '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';\r\nfunction ChatGpt() {\r\n  // const [typing, setTyping] = useState(false);\r\n  // const [messages, setMessages] = useState([\r\n  //   {\r\n  //     message: \"Hello, I am chatGPT!\", //GPT 시작 멘트\r\n  //     sender: \"ChatGPT\"\r\n  //   }\r\n  // ])\r\n\r\n  // const handleSend = async (message) => {\r\n  //   const newMessage = {\r\n  //     message: message,\r\n  //     sender: \"user\",\r\n  //     direction: \"outgoing\"\r\n  //   }\r\n\r\n  //   const newMessages = [...messages, newMessage];\r\n\r\n  //   setMessages(newMessages);\r\n\r\n  //   setTyping(true);\r\n\r\n  //   await MessageChatGPT(newMessages);\r\n\r\n  // }\r\n\r\n  // async function MessageChatGPT(charMessages){\r\n  //   //charMessages{ sender: \"user\" or \"chatGPT\", message: \"The message content here\"}\r\n  //   // apiMessages { role: \"user\" or \"assistant\", content: \"the message content here\"\"} api가 알아들을 수 있도록 이런 형태로 바꿔줘야함\r\n\r\n  //   let apiMessage = charMessages.map((messageObject) =>{\r\n  //     let role = \"\";\r\n  //     if(messageObject.sender === \"ChatGPT\"){\r\n  //       role=\"assistant\"\r\n  //     }else{\r\n  //       role = \"user\"\r\n  //     }\r\n  //     return {\r\n  //       role: role, content: messageObject.message\r\n  //     }\r\n  //   });\r\n\r\n  //   const systemMessage = {\r\n  //     role: \"system\",\r\n  //     content: \"Speak like a pirate\" //GPT 컨셉 설정\r\n  //   }\r\n\r\n  //   const apiRequestBody = {\r\n  //     \"model\" : \"gpt-3.5-turbo\",\r\n  //     \"messages\": [\r\n  //       systemMessage,\r\n  //       ...apiMessage // [message1, message2 ...]\r\n  //     ]\r\n  //   }\r\n\r\n  //   await fetch(\"https://api.openai.com/v1/chat/completions\",{\r\n  //     method: \"POST\",\r\n  //     headers: {\r\n  //       \"Authorization\": \"Bearer \" + API_KEY,\r\n  //       \"Content-Type\" : \"application/json\"\r\n  //     },\r\n  //     body: JSON.stringify(apiRequestBody)\r\n  //   }).then((data) => {\r\n  //     return data.json();\r\n  //   }).then((data) => {\r\n  //     console.log(data);\r\n  //     console.log(data.choices[0].message.content);\r\n  //     setMessages( \r\n  //       [...charMessages, {\r\n  //         message: data.choices[0].message.content,\r\n  //         sender: \"ChatGPT\"\r\n  //       }]\r\n  //     );\r\n  //     setTyping(false);\r\n  //   });\r\n  // }\r\n  \r\n  \r\n    return(\r\n    //   <div className='ChatGpt'>\r\n    //   <div style={{position: \"relative\", height: \"800px\", width: \"700px\"}}>\r\n    //     <MainContainer>\r\n    //       <ChatContainer>\r\n    //         <MessageList\r\n    //           typingIndicator={typing ? <TypingIndicator content=\"ChatGPT is typing\" /> : null}>\r\n    //           {messages.map((message, i) => {\r\n    //             return <Message key={i} model={message}/>\r\n    //           })}\r\n    //         </MessageList>\r\n    //         <MessageInput placeholder='Type message here' onSend={handleSend}/>\r\n    //       </ChatContainer>\r\n    //     </MainContainer>\r\n    //   </div>\r\n    // </div>\r\n\r\n\r\n      <div className=\"RChat\">\r\n      <h1>CHat Gpt</h1>\r\n\r\n      <input type=\"text\" className=\"chat\"></input>\r\n      </div>\r\n    \r\n    )\r\n}\r\n\r\nexport default ChatGpt;\r\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAO,eAAe;AACtB,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,2DAA2D;AAClE,SAAQC,aAAa,EAAEC,aAAa,EAAEC,WAAW,EAAEC,OAAO,EAAEC,YAAY,EAAEC,eAAe,QAAO,8BAA8B;;AAG9H;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,SAASC,OAAOA,CAAA,EAAG;EACjB;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;;EAEA;;EAEA;;EAEA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGE;IAAA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAGED,OAAA;MAAKE,SAAS,EAAC,OAAO;MAAAC,QAAA,gBACtBH,OAAA;QAAAG,QAAA,EAAI;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,eAEjBP,OAAA;QAAOQ,IAAI,EAAC,MAAM;QAACN,SAAS,EAAC;MAAM;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACtC;AAGZ;AAACE,EAAA,GAvGQR,OAAO;AAyGhB,eAAeA,OAAO;AAAC,IAAAQ,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}